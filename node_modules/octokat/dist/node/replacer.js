(function() {
  var Chainer, OBJECT_MATCHER, Replacer, TREE_OPTIONS, plus, ref, toPromise,
    slice = [].slice;

  plus = require('./plus');

  toPromise = require('./helper-promise').toPromise;

  ref = require('./grammar'), TREE_OPTIONS = ref.TREE_OPTIONS, OBJECT_MATCHER = ref.OBJECT_MATCHER;

  Chainer = require('./chainer');

  Replacer = (function() {
    function Replacer(_request) {
      this._request = _request;
    }

    Replacer.prototype.uncamelize = function(obj) {
      var i, key, o, value;
      if (Array.isArray(obj)) {
        return (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = obj.length; j < len; j++) {
            i = obj[j];
            results.push(this.uncamelize(i));
          }
          return results;
        }).call(this);
      } else if (obj === Object(obj)) {
        o = {};
        for (key in obj) {
          value = obj[key];
          o[plus.uncamelize(key)] = this.uncamelize(value);
        }
        return o;
      } else {
        return obj;
      }
    };

    Replacer.prototype.replace = function(o) {
      if (Array.isArray(o)) {
        return this._replaceArray(o);
      } else if (o === Object(o)) {
        return this._replaceObject(o);
      } else {
        return o;
      }
    };

    Replacer.prototype._replaceObject = function(orig) {
      var acc, context, j, k, key, len, re, ref1, url, value;
      acc = {};
      for (key in orig) {
        value = orig[key];
        this._replaceKeyValue(acc, key, value);
      }
      url = acc.url;
      if (url) {
        Chainer(this._request, url, true, null, acc);
      }
      for (key in OBJECT_MATCHER) {
        re = OBJECT_MATCHER[key];
        if (re.test(url)) {
          context = TREE_OPTIONS;
          ref1 = key.split('.');
          for (j = 0, len = ref1.length; j < len; j++) {
            k = ref1[j];
            context = context[k];
          }
          Chainer(this._request, url, k, context, acc);
        }
      }
      return acc;
    };

    Replacer.prototype._replaceArray = function(orig) {
      var arr, item, key, value;
      arr = (function() {
        var j, len, results;
        results = [];
        for (j = 0, len = orig.length; j < len; j++) {
          item = orig[j];
          results.push(this.replace(item));
        }
        return results;
      }).call(this);
      for (key in orig) {
        value = orig[key];
        if (typeof key === 'string') {
          this._replaceKeyValue(arr, key, value);
        }
      }
      return arr;
    };

    Replacer.prototype._replaceKeyValue = function(acc, key, value) {
      var fn, newKey;
      if (/_url$/.test(key)) {
        fn = (function(_this) {
          return function() {
            var args, cb, contentType, data, i, m, match, param, ref1, url;
            cb = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            if (!(/\{/.test(value) || /_page_url$/.test(key))) {
              console.warn('Deprecation warning: Use the .fooUrl field instead of calling the method');
            }
            url = value;
            i = 0;
            while (m = /(\{[^\}]+\})/.exec(url)) {
              match = m[1];
              if (i < args.length) {
                param = args[i];
                switch (match[1]) {
                  case '/':
                    param = "/" + param;
                    break;
                  case '?':
                    param = "?" + match.slice(2, -1) + "=" + param;
                }
              } else {
                param = '';
                if (match[1] !== '/') {
                  throw new Error("BUG: Missing required parameter " + match);
                }
              }
              url = url.replace(match, param);
              i++;
            }
            if (/upload_url$/.test(key)) {
              ref1 = args.slice(-2), contentType = ref1[0], data = ref1[1];
              return _this._request('POST', url, data, {
                contentType: contentType,
                raw: true
              }, cb);
            } else {
              return _this._request('GET', url, null, null, cb);
            }
          };
        })(this);
        fn = toPromise(fn);
        fn.url = value;
        newKey = key.substring(0, key.length - '_url'.length);
        acc[plus.camelize(newKey)] = fn;
        if (!/\{/.test(value)) {
          return acc[plus.camelize(key)] = value;
        }
      } else if (/_at$/.test(key)) {
        return acc[plus.camelize(key)] = value ? new Date(value) : null;
      } else {
        return acc[plus.camelize(key)] = this.replace(value);
      }
    };

    return Replacer;

  })();

  module.exports = Replacer;

}).call(this);
